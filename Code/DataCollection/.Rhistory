p.val <- data.frame(matrix(nrow =10000, ncol = length(j))) # df initilization
counter = 0
for (k in j){
counter = counter + 1
for (i in 1:10000) {
out <- mvrnorm(10, mu = c(0,0),
Sigma = matrix(c(1,j[counter],j[counter],1), ncol = 2),
empirical = TRUE) # Generating a 20*2 matrix with a correlation of 0.2
test <- cor.test(out[,1],out[,2], method="kendall", use="pairwise")
p.val[i,counter] <- test$p.value
}
}
p.val.95thperc <- data.frame(apply(p.val,2,quantile, prob=0.05))
summary(p.val.95thperc)
?countif
sum(p.val.95thperc<0.05)
p.val.99thperc <- data.frame(apply(p.val,2,quantile, prob=0.01))
sum(p.val.99thperc<0.01)
rm(test)
rm(c(out,counter))
rm(out,counter)
colnames(p.val,prefix = "Corr.Coeff=") <- j
View(p.val)
colnames(p.val,prefix = "Corr.Coeff=") <- as.character(j)
?colnames
colnames(p.val, prefix = "CorrCoeff") <- as.character(j)
ans <- as.character(j)
lengh(ans)
length(ans)
colnames(p.val, prefix = "CorrCoeff") <- t(as.character(j))
colnames(p.val) <- paste("Corr.Coeff=",as.character(j))
View(p.val)
colnames(p.val) <- paste("Corr.Coeff=",as.character(j),sep = "")
p.val.95thperc <- data.frame(apply(p.val,2,quantile, prob=0.05))
p.val.99thperc <- data.frame(apply(p.val,2,quantile, prob=0.01))
View(p.val.95thperc)
p.05.coefficients <- which(sum(p.val.95thperc<0.05))
p.05.coefficients <- which(p.val.95thperc<0.05)
p.05.coefficients <- names(p.val.95thperc<0.05)
p.05.coefficients <- row.names(p.val.95thperc<0.05)
p.05.coefficients <- row.names(which(p.val.95thperc<0.05))
p.05.coefficients <- row.names(p.val.95thperc[p.05.coefficients])
p.05.coefficients <- which(p.val.95thperc<0.05)
p.val.95thperc[9]
p.05.coefficients <- which(p.val.95thperc<0.05)
p.05.coefficients <- row.names(p.val.95thperc[,p.05.coefficients])
p.05.coefficients <- row.names(p.val.95thperc[p.05.coefficients,])
p.05.coefficients <- row.names(p.val.95thperc[9,])
p.05.coefficients <- p.val.95thperc[9,]
p.05.coefficients <- col.names(p.val.95thperc[9,])
p.05.coefficients <- colnames(p.val.95thperc[9,])
p.05.coefficients <- rownames(p.val.95thperc[9,])
View(p.val.99thperc)
p.05.coefficients <- which(p.val.95thperc<0.05)
p.05.coefficients <- which(p.val.95thperc<0.05)
p.01.coefficients <- which(p.val.99thperc<0.01)
save(file="KendallTau", list = c(p.05.coefficients,p.01.coefficients,
p.val.99thperc,p.val.95thperc,
p.val))
save(file="KendallTau.RData", list = c(p.05.coefficients,p.01.coefficients,
p.val.99thperc,p.val.95thperc,
p.val))
save(list = c(p.05.coefficients,p.01.coefficients,
p.val.99thperc,p.val.95thperc,
p.val), file="KendallTau.RData")
?save
save(c(p.05.coefficients,p.01.coefficients,
p.val.99thperc,p.val.95thperc,
p.val), file="KendallTau.RData")
save(p.05.coefficients,p.01.coefficients,
p.val.99thperc,p.val.95thperc,
p.val, file="KendallTau.RData")
# Package Installation and Setting the Working Dir
#--------------------------------------------------
#install.packages("pacman") # install if needed
library(pacman)
p_load(osmdata)
library(lpSolve)
f.obj < c(0.75, 0.5, 0.15)
f.obj <- c(0.75, 0.5, 0.15)
f.con <- matrix(c(35,0.5,0.5,
60, 300, 10,
30, 20, 10), nrow=3,
byrow = TRUE)
f.dir <- c(">=", ">=", ">=")
f.rhs <- c(0.5, 15, 4)
LP_Solution <- lp("min", f.obj, f.con, f.dir, f.rhs, all.bin = F)
LP_Solution
LP_Solution$solution
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) # clear global environment
graphics.off() # close all graphics
library(pacman) # needs to be installed first
p_load(R.matlab, plotly, extrafont, grDevices, gridExtra,
dplyr, stringr, tidyverse, utils, reshape2,
anomalize, MVN, fractal)
?data.frame
load("C:/Users/megahefm/AppData/Local/Temp/Temp1_Notebook-112_Prediction_Classification-master.zip/Notebook-112_Prediction_Classification-master/serie1_telde.RData")
View(day_df)
View(serie1)
str(serie1)
load("C:/Users/megahefm/AppData/Local/Temp/Temp1_Notebook-112_Prediction_Classification-master.zip/Notebook-112_Prediction_Classification-master/serie1_orotava.RData")
load("C:/Users/megahefm/AppData/Local/Temp/Temp1_Notebook-112_Prediction_Classification-master.zip/Notebook-112_Prediction_Classification-master/serie1_telde.RData")
load("C:/Users/megahefm/AppData/Local/Temp/Temp1_Notebook-112_Prediction_Classification-master.zip/Notebook-112_Prediction_Classification-master/data1_el_hierro.RData")
View(data.tree)
load("C:/Users/megahefm/AppData/Local/Temp/Temp1_Notebook-112_Prediction_Classification-master.zip/Notebook-112_Prediction_Classification-master/serie1_orotava.RData")
load("C:/Users/megahefm/AppData/Local/Temp/Temp1_Notebook-112_Prediction_Classification-master.zip/Notebook-112_Prediction_Classification-master/serie1_telde.RData")
str(data.tree)
str(serie1)
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(RPostgres)
wrds <- dbConnect(Postgres(),
host='wrds-pgdata.wharton.upenn.edu',
port=9737,
dbname='wrds',
sslmode='require')
library(pacman)
p_load(RPostgres)
wrds <- dbConnect(Postgres(),
host='wrds-pgdata.wharton.upenn.edu',
port=9737,
dbname='wrds',
sslmode='require')
?dbConnect
library(pacman)
p_load(RPostgres)
wrds <- dbConnect(Postgres(),
host='wrds-pgdata.wharton.upenn.edu',
port=9737,
dbname='wrds',
sslmode='require',
user = 'fmegahed',
password = 'BBRX2Owfoeh8@Do@')
library(pacman)
p_load(RPostgres)
source("authentication_wrds.R")
wrds <- dbConnect(Postgres(),
host='wrds-pgdata.wharton.upenn.edu',
port=9737,
dbname='wrds',
sslmode='require')
library(pacman)
p_load(RPostgres)
source("J:\\Team Drives\\Regions Project\\Codeauthentication_wrds.R")
library(pacman)
p_load(RPostgres)
source("J:/Team Drives/Regions Project/Codeauthentication_wrds.R")
library(pacman)
p_load(RPostgres)
source("J:/Team Drives/Regions Project/Codeauthentication_wrds.R")
library(pacman)
p_load(RPostgres)
source("J:/Team Drives/Regions Project/Code/authentication_wrds.R")
# wrds <- dbConnect(Postgres(),
#                   host='wrds-pgdata.wharton.upenn.edu',
#                   port=9737,
#                   dbname='wrds',
#                   sslmode='require')
# res <- dbSendQuery(wrds, "select a.gvkey, a.datadate, a.tic,
#                    a.conm, a.at, a.lt, b.prccm, b.cshoq
#                    from comp.funda a join comp.secm b
#                    on a.gvkey = b.gvkey
#                    and a.datadate = b.datadate
#                    where a.tic = 'EGN'
#                    and a.datafmt = 'STD'
#                    and a.consol = 'C'
#                    and a.indfmt = 'INDL'")
# data <- dbFetch(res, n = -1)
# dbClearResult(res)
# data
library(pacman)
p_load(RPostgres)
source("J:/Team Drives/Regions Project/Code/authentication_wrds.R")
wrds <- dbConnect(Postgres(),
host='wrds-pgdata.wharton.upenn.edu',
port=9737,
dbname='wrds',
sslmode='require')
library(pacman)
p_load(RPostgres)
source("J:/Team Drives/Regions Project/Code/authentication_wrds.R")
wrds <- dbConnect(Postgres(),
host='wrds-pgdata.wharton.upenn.edu',
port=9737,
dbname='wrds',
sslmode='require',
user= user,
password = password)
res <- dbSendQuery(wrds, "select a.gvkey, a.datadate, a.tic,
a.conm, a.at, a.lt, b.prccm, b.cshoq
from comp.funda a join comp.secm b
on a.gvkey = b.gvkey
and a.datadate = b.datadate
where a.tic = 'EGN'
and a.datafmt = 'STD'
and a.consol = 'C'
and a.indfmt = 'INDL'")
data <- dbFetch(res, n = -1)
dbClearResult(res)
data
library(pacman)
p_load(RPostgres)
source("J:/Team Drives/Regions Project/Code/authentication_wrds.R")
wrds <- dbConnect(Postgres(),
host='wrds-pgdata.wharton.upenn.edu',
port=9737,
dbname='wrds',
sslmode='require',
user= user,
password = password)
res <- dbSendQuery(wrds, "select q.gvkey, q.datadate, q.tic,
q.conm, q.at, q.lt, b.prccm, b.cshoq
from comp.funda q join comp.secm b
on q.gvkey = b.gvkey
and q.datadate = b.datadate
where q.tic = 'EGN'
and q.datafmt = 'STD'
and q.consol = 'C'
and q.indfmt = 'INDL'")
data <- dbFetch(res, n = -1)
dbClearResult(res)
data
evals <- round(4.5/5, 2)
unlink('J:/My Drive/Miami/Research/2018/Amir - Changepoint Paper/Code/GitHub/fatigue-changepoint/ChangepointAnalysisForFatigueData_cache', recursive = TRUE)
cd <- c(60, 120, 240)
(cd - 60) + 1
p_load(stocks)
library(pacman)
p_load(stocks)
vanguard_bond_etfs
?getSy
?getSymbolLookup
getSymbolLookup()
#_______________________________Clear Screen and Environment
cat("\014") # clear screen
rm(list=ls()) # clear global environment
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set wd to current file location
#________________________________ Installing Packages________________________
library(pacman)
p_load(stocks, quantmod)
getSymbols(c("BTC-USD","ETH-USD","XRP-USD","BCH-USD","LTC-USD",
"EOS-USD", "XLM-USD", "ADA-USD", "XMR-USD",
"TRX-USD"))
View(`TRX-USD`)
# Top 40 cryptos by volume as of 3:48 pm Eastern Time on 10/18/2018
# From https://coinmarketcap.com/
# Not all of these can be traded with a dollar. If there is not direct purchase
# with USD; the price of BTC is used for conversion
crypto_data <- getSymbols(c("BTC-USD","ETH-USD","XRP-USD","BCH-USD","EOS-USD",
"XLM-USD", "LTC-USD", "USDT-USD", "ADA-USD", "XMR-USD",
"TRX-USD", "IOTA-USD", "DASH-USD", "BNB-USD", "NEO-USD",
"ETC-USD", "XEM-USD", "XTZ-USD", "VET-USD", "ZEC-USD",
"DOGE-USD", "MKR-USD", "ZRX-USD", "OMG-USD", "BTG-USD",
"ONT-USD", "QTUM-USD", "DCR-USD", "LSK-USD", "AE-USD",
"ICX-USD", "BCD-USD", "BTS-USD", "ZIL-USD","NANO-USD",
"DGB-USD", "BCN-USD", "SC-USD", "STEEM-USD", "XVG-USD"))
# Top 10 cryptos by volume as of 3:48 pm Eastern Time on 10/18/2018
# From https://coinmarketcap.com/
# Not all of these can be traded with a dollar. If there is not direct purchase
# with USD; the price of BTC is used for conversion
crypto_data <- getSymbols(c("BTC-USD","ETH-USD","XRP-USD","BCH-USD","EOS-USD",
"XLM-USD", "LTC-USD", "USDT-USD", "ADA-USD", "XMR-USD"))
# Top 40 cryptos by volume as of 3:48 pm Eastern Time on 10/18/2018
# From https://coinmarketcap.com/
# Not all of these can be traded with a dollar. If there is not direct purchase
# with USD; the price of BTC is used for conversion
getSymbols(c("BTC-USD","ETH-USD","XRP-USD","BCH-USD","EOS-USD",
"XLM-USD", "LTC-USD", "USDT-USD", "ADA-USD", "XMR-USD",
"TRX-USD", "IOTA-USD", "DASH-USD", "BNB-USD", "NEO-USD",
"ETC-USD", "XEM-USD", "XTZ-USD", "VET-USD", "ZEC-USD",
"DOGE-USD", "MKR-USD", "ZRX-USD", "OMG-USD", "BTG-USD",
"ONT-USD", "QTUM-USD", "DCR-USD", "LSK-USD", "AE-USD",
"ICX-USD", "BCD-USD", "BTS-USD", "ZIL-USD","NANO-USD",
"DGB-USD", "BCN-USD", "SC-USD", "STEEM-USD", "XVG-USD"))
# Top 40 cryptos by volume as of 3:48 pm Eastern Time on 10/18/2018
# From https://coinmarketcap.com/
# Not all of these can be traded with a dollar. If there is not direct purchase
# with USD; the price of BTC is used for conversion
getSymbols(c("BTC-BTC","ETH-BTC","XRP-BTC","BCH-BTC","EOS-BTC",
"XLM-BTC", "LTC-BTC", "USDT-BTC", "ADA-BTC", "XMR-BTC",
"TRX-BTC", "IOTA-BTC", "DASH-BTC", "BNB-BTC", "NEO-BTC",
"ETC-BTC", "XEM-BTC", "XTZ-BTC", "VET-BTC", "ZEC-BTC",
"DOGE-BTC", "MKR-BTC", "ZRX-BTC", "OMG-BTC", "BTG-BTC",
"ONT-BTC", "QTUM-BTC", "DCR-BTC", "LSK-BTC", "AE-BTC",
"ICX-BTC", "BCD-BTC", "BTS-BTC", "ZIL-BTC","NANO-BTC",
"DGB-BTC", "BCN-BTC", "SC-BTC", "STEEM-BTC", "XVG-BTC"))
# Top 10 cryptos by volume as of 3:48 pm Eastern Time on 10/18/2018
# From https://coinmarketcap.com/
# Not all of these can be traded with a dollar. If there is not direct purchase
# with USD; the price of BTC is used for conversion
getSymbols(c("BTC-USD","ETH-USD","XRP-USD","BCH-USD","EOS-USD",
"XLM-USD", "LTC-USD", "USDT-USD", "ADA-USD", "XMR-USD",
"TRX-USD")) # included 11 since USDT-USD is not volatile at all
?set.seed
set.seed(1018)
# US Economic Indicators based on Trading Economics
macroeconomic_names <- {}
p_load(stocks, quantmod, dplyr, rvest)
dataholder <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(3) > table") %>%
html_table()
View(dataholder)
View(dataholder)
View(dataholder)
dataholder[21,3]
dataholder <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(3) > table") %>%
html_table() %>% subset(Last != "Last")
View(dataholder)
dataholder <- dataholder[,-7]
dataholder2 <- dataholder[,-7]
colnames(dataholder)[1] <- "Index"
View(dataholder2)
View(dataholder)
dataholder2 <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(1) > table") %>%
html_table()
dataholder2 <- dataholder2[,-7]
colnames(dataholder2)[1] <- "Index"
View(dataholder2)
dataholder2 <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(1) > table") %>%
html_table()
dataholder2 <- dataholder2[-1,-7]
View(dataholder2)
macroeconomic_names <- rbind(dataholder2, dataholder)
View(dataholder2)
View(dataholder)
colnames(dataholder2) <- colnames(dataholder)
macroeconomic_names <- rbind(dataholder2, dataholder)
View(macroeconomic_names)
#__________________________________________________________________________
# Top 10 cryptos by volume as of 3:48 pm Eastern Time on 10/18/2018
# From https://coinmarketcap.com/
# Not all of these can be traded with a dollar. If there is not direct purchase
# with USD; the price of BTC is used for conversion
crypto_data <- getSymbols(c("BTC-USD","ETH-USD","XRP-USD","BCH-USD","EOS-USD",
"XLM-USD", "LTC-USD", "USDT-USD", "ADA-USD", "XMR-USD",
"TRX-USD")) # included 11 since USDT-USD is not volatile at all
crypto_data
crypto_data[[1]]
crypto_data[[1]][]
#__________________________________________________________________________
# U.S. Stocks (Sampled from AMEX, NYSE, NASDAQ)
amex <- read.csv("../../amex-companylist.csv")
#__________________________________________________________________________
# U.S. Stocks (Sampled from AMEX, NYSE, NASDAQ)
amex <- read.csv("Data/amex-companylist.csv")
?sample
amex_tickers <- sample_frac(amex, 0.1)
#__________________________________________________________________________
# U.S. Stocks (Sampled from AMEX, NYSE, NASDAQ)
amex_sample <- read.csv("Data/amex-companylist.csv") %>% sample_frac(0.1)
nyse_sample <- read.csv("Data/nyse-companylist.csv") %>% sample_frac(0.1)
nasdaq_sample <- read.csv("Data/nasdaq-companylist.csv") %>% sample_frac(0.1)
stocks_to_be_tracked <- rbind(amex_sample, nasdaq_sample, nyse_sample)
#__________________________________________________________________________
# Top 10 cryptos by volume as of 3:48 pm Eastern Time on 10/18/2018
# From https://coinmarketcap.com/
# Not all of these can be traded with a dollar. If there is not direct purchase
# with USD; the price of BTC is used for conversion
top_crypto_tickers <- getSymbols(c("BTC-USD","ETH-USD","XRP-USD","BCH-USD","EOS-USD",
"XLM-USD", "LTC-USD", "USDT-USD", "ADA-USD", "XMR-USD",
"TRX-USD")) # included 11 since USDT-USD is not volatile at all
#__________________________________________________________________________
# Top 10 cryptos by volume as of 3:48 pm Eastern Time on 10/18/2018
# From https://coinmarketcap.com/
# Not all of these can be traded with a dollar. If there is not direct purchase
# with USD; the price of BTC is used for conversion
top_crypto_tickers <- getSymbols(c("BTC-USD","ETH-USD","XRP-USD","BCH-USD","EOS-USD",
"XLM-USD", "LTC-USD", "USDT-USD", "ADA-USD", "XMR-USD",
"TRX-USD")) # included 11 since USDT-USD is not volatile at all
#__________________________________________________________________________
# US Economic Indicators based on Trading Economics
# Running this code; we got 198 names of U.S. Economic Indicators
# We need to scrape their data
dataholder <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(3) > table") %>%
html_table() %>% subset(Last != "Last")
dataholder <- dataholder[,-7]
dataholder2 <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(1) > table") %>%
html_table()
dataholder2 <- dataholder2[-1,-7]
colnames(dataholder)[1] <- "Index"
colnames(dataholder2) <- colnames(dataholder)
macroeconomic_names <- rbind(dataholder2, dataholder)
rm(dataholder, dataholder2) # Data Cleaning; we do not need to store them
#__________________________________________________________________________
# U.S. Stocks (Sampled from AMEX, NYSE, NASDAQ)
amex_sample <- read.csv("Data/amex-companylist.csv") %>% sample_frac(0.1)
nyse_sample <- read.csv("Data/nyse-companylist.csv") %>% sample_frac(0.1)
nasdaq_sample <- read.csv("Data/nasdaq-companylist.csv") %>% sample_frac(0.1)
stocks_to_be_tracked <- rbind(amex_sample, nasdaq_sample, nyse_sample)
rm(amex_sample, nyse_sample, nasdaq_sample)
#__________________________________________________________________________
# Getting Currency Pairs
majors <- read_html("http://www.sharptrader.com/new-to-trading/forex/majors-minors-exotic-currency-pairs/") %>%
html_node("#content > div:nth-child(4) > div > div > div.wpb_text_column.wpb_content_element > div > div > table") %>%
html_table()
View(majors)
colnames(majors) <- majors[1,]
majors <- majors[-1,]
minors <- read_html("http://www.sharptrader.com/new-to-trading/forex/majors-minors-exotic-currency-pairs/") %>%
html_node("#content > div:nth-child(7) > div > div > div.wpb_text_column.wpb_content_element > div > div > table") %>%
html_table()
colnames(minors) <- minors[1,]
minors <- minors[-1,]
exotics <- read_html("http://www.sharptrader.com/new-to-trading/forex/majors-minors-exotic-currency-pairs/") %>%
html_node("#content > div:nth-child(10) > div > div > div.wpb_text_column.wpb_content_element > div > div > table") %>%
html_table()
colnames(exotics) <- exotics[1,]
exotics <- exotics[-1,]
currency_pairs <- rbind(majors, minors, exotics)
rm(majors,minors, exotics)
p_load(stocks, quantmod, dplyr, rvest, Quandl)
#__________________________________________________________________________
# Commodities
metaData()
#__________________________________________________________________________
# Commodities
metaData(ts)
View(stocks_to_be_tracked)
# Some if not all currencies can be obtained like this
getSymbols("USD/EUR", src="oanda")
?getSymbols.oanda
getSymbols("BCO/USD", src="oanda")
getSymbols("BCOUSD", src="oanda")
getSymbols("BCO-USD", src="oanda")
getSymbols("BCO/USD", src="oanda")
getSymbols("BCO", src="oanda")
getSymbols("BCO/EUR", src="oanda")
getSymbols("BCO/GBP", src="oanda")
getSymbols("USD/BCO", src="oanda")
getSymbols("instrument=BCO/USD", src="oanda")
getSymbols("CORN/USD", src="oanda")
#__________________________________________________________________________
# Commodities
commodity.names <- read_html("http://www.visualcapitalist.com/top-importers-exporters-worlds-18-traded-goods/") %>% html_node("#tablepress-184-no-4")
#_______________________________Clear Screen and Environment
cat("\014") # clear screen
rm(list=ls()) # clear global environment
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set wd to current file location
set.seed(1018) # pick an arbitrary seed number; this number corresponded to date of analysis
# Seed number to be fixed to allow for replicating our analysis
#________________________________ Installing Packages________________________
install.packages("pacman")
library(pacman)
p_load(stocks, quantmod, dplyr, rvest, Quandl)
#__________________________________________________________________________
# Top 10 cryptos by volume as of 3:48 pm Eastern Time on 10/18/2018
# From https://coinmarketcap.com/
# Not all of these can be traded with a dollar. If there is not direct purchase
# with USD; the price of BTC is used for conversion
top_crypto_tickers <- getSymbols(c("BTC-USD","ETH-USD","XRP-USD","BCH-USD","EOS-USD",
"XLM-USD", "LTC-USD", "USDT-USD", "ADA-USD", "XMR-USD",
"TRX-USD")) # included 11 since USDT-USD is not volatile at all
#Note:
# We also got the data for their tickers based on the previous line of code
# and they are stored with the names of the ticker pairs
#__________________________________________________________________________
# US Economic Indicators based on Trading Economics
# Running this code; we got 198 names of U.S. Economic Indicators
# We need to scrape their data
dataholder <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(3) > table") %>%
html_table() %>% subset(Last != "Last")
dataholder <- dataholder[,-7]
dataholder2 <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(1) > table") %>%
html_table()
dataholder2 <- dataholder2[-1,-7]
colnames(dataholder)[1] <- "Index"
colnames(dataholder2) <- colnames(dataholder)
macroeconomic_names <- rbind(dataholder2, dataholder)
rm(dataholder, dataholder2) # Data Cleaning; we do not need to store them
#__________________________________________________________________________
# U.S. Stocks (Sampled from AMEX, NYSE, NASDAQ)
# CSVs obtained from: https://www.nasdaq.com/screening/company-list.aspx
amex_sample <- read.csv("Data/amex-companylist.csv") %>% sample_frac(0.1)
nyse_sample <- read.csv("Data/nyse-companylist.csv") %>% sample_frac(0.1)
nasdaq_sample <- read.csv("Data/nasdaq-companylist.csv") %>% sample_frac(0.1)
stocks_to_be_tracked <- rbind(amex_sample, nasdaq_sample, nyse_sample)
rm(amex_sample, nyse_sample, nasdaq_sample)
#__________________________________________________________________________
# Getting Currency Pairs
majors <- read_html("http://www.sharptrader.com/new-to-trading/forex/majors-minors-exotic-currency-pairs/") %>%
html_node("#content > div:nth-child(4) > div > div > div.wpb_text_column.wpb_content_element > div > div > table") %>%
html_table()
colnames(majors) <- majors[1,]
majors <- majors[-1,]
minors <- read_html("http://www.sharptrader.com/new-to-trading/forex/majors-minors-exotic-currency-pairs/") %>%
html_node("#content > div:nth-child(7) > div > div > div.wpb_text_column.wpb_content_element > div > div > table") %>%
html_table()
colnames(minors) <- minors[1,]
minors <- minors[-1,]
exotics <- read_html("http://www.sharptrader.com/new-to-trading/forex/majors-minors-exotic-currency-pairs/") %>%
html_node("#content > div:nth-child(10) > div > div > div.wpb_text_column.wpb_content_element > div > div > table") %>%
html_table()
colnames(exotics) <- exotics[1,]
exotics <- exotics[-1,]
currency_pairs <- rbind(majors, minors, exotics) # Combining them in one df
rm(majors,minors, exotics)
# Note:
# Some if not all currencies can be obtained like this
getSymbols("USD/EUR", src="oanda") # this will create a df called USDEUR
#__________________________________________________________________________
# Commodities site reached from: https://www.businessinsider.com/the-18-most-traded-goods-in-the-world-2018-2
commodity.names <- read_html("http://www.visualcapitalist.com/top-importers-exporters-worlds-18-traded-goods/") %>%
html_node("#tablepress-184-no-4") %>% html_table()
install.packages("pacman")
