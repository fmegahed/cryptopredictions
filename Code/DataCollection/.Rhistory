install.packages("formatR")
library(formatR)
setwd("C:/Users/megahefm/Google Drive/Miami/Research/2018/cryptopredictions/Code/DataCollection")
# Installing the required libraries
#----------------------------------
install.packages("pacman") # Unhash if not installed
install.packages("pacman")
setwd("C:/Users/megahefm/Google Drive/Miami/Research/2018/cryptopredictions/Code/DataCollection")
# Installing the required libraries
#----------------------------------
install.packages("pacman") # Unhash if not installed
install.packages("pacman")
# Scraping the Data:
# ------------------
base.url <-"https://github.com/ethereum/go-ethereum/releases"
url.git <- "https://github.com/ethereum/go-ethereum/releases"
# Initilization for looping
verified.releases <- {}
releases <- {}
verified.releases.dates <- {}
dates <- {}
url.extension <- "placeholder"
while (url.extension!="v0.9.16") {
# Step 1: Reading the Data
github.contents <- readLines(url.git)
# Step 2: Scraping the data pertaining
# (A) Obtaining all releases in the url (pages increment)
releases.holder <- as.data.frame(strapplyc(github.contents,
"href=\"/ethereum/ethereum/releases/tag/(.*?)\">",
simplify = rbind))
# (B) Obtaining all dates in the url (pages increment)
dates.holder <- as.data.frame(strapplyc(github.contents,
"<relative-time datetime=(.*?) ",
simplify = rbind))
# Step 3: Ensuring that releases and dates match
# Checked to work in ethereum
if (nrow(dates.holder) != nrow(releases.holder)){
dates.holder <- unique(dates.holder)
}
# Step 4: Getting all verified releases (easier using rvest)
alt.github.contents <- read_html(url.git)
verified.releases.holder <- html_nodes(alt.github.contents,
"a > span.css-truncate-target")
verified.releases.holder <- data.frame(html_text(verified.releases.holder))
verified.releases.dates.holder <- html_nodes(alt.github.contents,
"p > relative-time")
verified.releases.dates.holder <- data.frame(html_text(verified.releases.dates.holder))
# Storing the data
verified.releases <- rbind(verified.releases,verified.releases.holder)
releases <- rbind(releases,releases.holder)
verified.releases.dates <- rbind(verified.releases.dates,
verified.releases.dates.holder)
dates <- rbind(dates,dates.holder)
# Going to the next page
url.extension <- as.character(releases.holder[nrow(releases.holder),1])
url.git <- paste(base.url,url.extension,sep = "")
Sys.sleep(2)
}
pacman::p_load(rvest,gsubfn,stringr)
while (url.extension!="v0.9.16") {
# Step 1: Reading the Data
github.contents <- readLines(url.git)
# Step 2: Scraping the data pertaining
# (A) Obtaining all releases in the url (pages increment)
releases.holder <- as.data.frame(strapplyc(github.contents,
"href=\"/ethereum/ethereum/releases/tag/(.*?)\">",
simplify = rbind))
# (B) Obtaining all dates in the url (pages increment)
dates.holder <- as.data.frame(strapplyc(github.contents,
"<relative-time datetime=(.*?) ",
simplify = rbind))
# Step 3: Ensuring that releases and dates match
# Checked to work in ethereum
if (nrow(dates.holder) != nrow(releases.holder)){
dates.holder <- unique(dates.holder)
}
# Step 4: Getting all verified releases (easier using rvest)
alt.github.contents <- read_html(url.git)
verified.releases.holder <- html_nodes(alt.github.contents,
"a > span.css-truncate-target")
verified.releases.holder <- data.frame(html_text(verified.releases.holder))
verified.releases.dates.holder <- html_nodes(alt.github.contents,
"p > relative-time")
verified.releases.dates.holder <- data.frame(html_text(verified.releases.dates.holder))
# Storing the data
verified.releases <- rbind(verified.releases,verified.releases.holder)
releases <- rbind(releases,releases.holder)
verified.releases.dates <- rbind(verified.releases.dates,
verified.releases.dates.holder)
dates <- rbind(dates,dates.holder)
# Going to the next page
url.extension <- as.character(releases.holder[nrow(releases.holder),1])
url.git <- paste(base.url,url.extension,sep = "")
Sys.sleep(2)
}
View(verified.releases.dates.holder)
base.url <-"https://github.com/ethereum/go-ethereum/releases"
url.git <- "https://github.com/ethereum/go-ethereum/releases"
# Initilization for looping
releases <- {}
releases.dates <- {}
url.extension <- "placeholder"
# Looping through all ethereum releases on github
while (url.extension!="v0.9.16") {
alt.github.contents <- read_html(url.git)
releases.holder <- html_nodes(alt.github.contents,
"a > span.css-truncate-target")
releases.holder <- data.frame(html_text(releases.holder))
releases.dates.holder <- html_nodes(alt.github.contents,
"p > relative-time")
releases.dates.holder <- data.frame(html_text(releases.dates.holder))
# Storing the data
releases <- rbind(releases,releases.holder)
releases.dates <- rbind(releases.dates,
releases.dates.holder)
# Going to the next page
url.extension <- as.character(releases.holder[nrow(releases.holder),1])
url.git <- paste(base.url,url.extension,sep = "")
Sys.sleep(2)
}
base.url <-"https://github.com/ethereum/go-ethereum/releases?after="
url.git <- "https://github.com/ethereum/go-ethereum/releases?after="
# Initilization for looping
releases <- {}
releases.dates <- {}
url.extension <- "placeholder"
# Looping through all ethereum releases on github
while (url.extension!="v0.9.16") {
alt.github.contents <- read_html(url.git)
releases.holder <- html_nodes(alt.github.contents,
"a > span.css-truncate-target")
releases.holder <- data.frame(html_text(releases.holder))
releases.dates.holder <- html_nodes(alt.github.contents,
"p > relative-time")
releases.dates.holder <- data.frame(html_text(releases.dates.holder))
# Storing the data
releases <- rbind(releases,releases.holder)
releases.dates <- rbind(releases.dates,
releases.dates.holder)
# Going to the next page
url.extension <- as.character(releases.holder[nrow(releases.holder),1])
url.git <- paste(base.url,url.extension,sep = "")
Sys.sleep(2)
}
# Saving the data
base.url <-"https://github.com/ethereum/go-ethereum/releases?after="
url.git <- "https://github.com/ethereum/go-ethereum/releases?after="
# Initilization for looping
releases <- {}
releases.dates <- {}
url.extension <- "placeholder"
# Looping through all ethereum releases on github
while (url.extension!="poc5-rc8") {
alt.github.contents <- read_html(url.git)
releases.holder <- html_nodes(alt.github.contents,
"a > span.css-truncate-target")
releases.holder <- data.frame(html_text(releases.holder))
releases.dates.holder <- html_nodes(alt.github.contents,
"p > relative-time")
releases.dates.holder <- data.frame(html_text(releases.dates.holder))
# Storing the data
releases <- rbind(releases,releases.holder)
releases.dates <- rbind(releases.dates,
releases.dates.holder)
# Going to the next page
url.extension <- as.character(releases.holder[nrow(releases.holder),1])
url.git <- paste(base.url,url.extension,sep = "")
Sys.sleep(2)
}
pacman::p_load(rvest,gsubfn,stringr) # allows multiple loading
# Scraping the Data:
# ------------------
base.url <-"https://github.com/ethereum/go-ethereum/releases?after="
url.git <- "https://github.com/ethereum/go-ethereum/releases?after="
# Initilization for looping
releases <- {}
releases.dates <- {}
url.extension <- "placeholder"
# Looping through all ethereum releases on github
while (url.extension!="v0.9.16") {
alt.github.contents <- read_html(url.git)
releases.holder <- html_nodes(alt.github.contents,
"a > span.css-truncate-target")
releases.holder <- data.frame(html_text(releases.holder))
releases.dates.holder <- html_nodes(alt.github.contents,
"p > relative-time")
releases.dates.holder <- data.frame(html_text(releases.dates.holder))
# Storing the data
releases <- rbind(releases,releases.holder)
releases.dates <- rbind(releases.dates,
releases.dates.holder)
# Going to the next page
url.extension <- as.character(releases.holder[nrow(releases.holder),1])
url.git <- paste(base.url,url.extension,sep = "")
Sys.sleep(2)
}
# Saving the data
View(releases)
86+21
preleases.after.0.5.18 <- 21
# can be easily verified by going through
#
# and click after (when counted)
other.not.counted <- c('v0.6.3','v0.6.4','v0.6.5-1',
'v0.6.5-2','PoC6','vv0.7.10',
'v0.7.11','v0.8.4-1','v0.9.17',
'v0.9.22','v0.9.23 (Non Olympic-Release')
107+11
# can be easily verified by going through
#
# and click next (after counting)
other.not.counted <- c('v0.6.3','v0.6.4','v0.6.5-1',
'v0.6.5-2','PoC6','vv0.7.10',
'v0.7.11','v0.8.4-1','v0.9.17',
'v0.9.22','v0.9.23 (Non Olympic-Release)',
'v0.9.39','v1.0.4','v1.0.1.2 (aug 20, 2015)')
107+14
other.not.counted <- c('v0.6.3','v0.6.4','v0.6.5-1',
'v0.6.5-2','PoC6','vv0.7.10',
'v0.7.11','v0.8.4-1', 'v0.8.5-2', 'v0.9.17', '0.9.16',
'v0.9.22','v0.9.23 (Non Olympic-Release)',
'v0.9.39','v1.0.4','v1.0.1.2 (aug 20, 2015)')
16+86+21
other.not.counted <- c('v0.6.3','v0.6.4','v0.6.5-1',
'v0.6.5-2','PoC6','vv0.7.10',
'v0.7.11','v0.8.4-1', 'v0.8.5-2', 'v0.9.17', '0.9.16',
'v0.9.22','v0.9.23 (Non Olympic-Release)',
'v0.9.39','v1.0.4','v1.0.1.2 (aug 20, 2015)',
'v1.0.5 (Sept 10, 2015','v1.0.1')
base.url <-"https://github.com/ethereum/go-ethereum/releases?after="
url.git <- "https://github.com/ethereum/go-ethereum/releases?after="
# Initilization for looping
releases <- {}
releases.dates <- {}
url.extension <- "placeholder"
while (url.extension!="0.5.18") {
alt.github.contents <- read_html(url.git)
releases.holder <- html_nodes(alt.github.contents,
"a > span.css-truncate-target")
releases.holder <- data.frame(html_text(releases.holder))
releases.dates.holder <- html_nodes(alt.github.contents,
"p > relative-time")
releases.dates.holder <- data.frame(html_text(releases.dates.holder))
# Storing the data
releases <- rbind(releases,releases.holder)
releases.dates <- rbind(releases.dates,
releases.dates.holder)
# Going to the next page
url.extension <- as.character(releases.holder[nrow(releases.holder),1])
url.git <- paste(base.url,url.extension,sep = "")
Sys.sleep(2)
if(releases=="")
}
while (url.extension!="0.5.18") {
alt.github.contents <- read_html(url.git)
releases.holder <- html_nodes(alt.github.contents,
"a > span.css-truncate-target")
releases.holder <- data.frame(html_text(releases.holder))
releases.dates.holder <- html_nodes(alt.github.contents,
"p > relative-time")
releases.dates.holder <- data.frame(html_text(releases.dates.holder))
# Storing the data
releases <- rbind(releases,releases.holder)
releases.dates <- rbind(releases.dates,
releases.dates.holder)
# Going to the next page
url.extension <- as.character(releases.holder[nrow(releases.holder),1])
url.git <- paste(base.url,url.extension,sep = "")
Sys.sleep(2)
}
release.ethereum <- data.frame(cbind(releases.dates,releases))
releases.after.0.5.18 <- 21 # manually counted on the pages
# can be easily verified by going through
# https://github.com/ethereum/go-ethereum/releases?after=0.5.18
# and click next (after counting)
other.not.counted <- c('v0.6.3','v0.6.4','v0.6.5-1',
'v0.6.5-2','PoC6','vv0.7.10',
'v0.7.11','v0.8.4-1', 'v0.8.5-2', 'v0.9.17', '0.9.16',
'v0.9.22','v0.9.23 (Non Olympic-Release)',
'v0.9.39','v1.0.4','v1.0.1.2 (aug 20, 2015)',
'v1.0.5 (Sept 10, 2015','v1.0.1')
totalexpected <- 125
total.scraped.and.manually.counted <- length(other.not.counted) + nrow(release.ethereum) +  releases.after.0.5.18
save(release.ethereum,total.scraped.and.manually.counted,totalexpected,
file = "C:/Users/megahefm/Google Drive/Miami/Research/2018/cryptopredictions/LabNotebook/ethereumGitHub-26-2-2018.RData")
