password=pwd,
dbname=dbn,
host=svr,
Port = 1433)
con <- dbConnect(MySQL(),
user=uid,
password=pwd,
dbname=dbn,
host=svr,
Port = 1433)
con
sView(`ADA-USD`)
top_crypto_tickers <- getSymbols(c("BTC-USD","ETH-USD","XRP-USD","BCH-USD","EOS-USD",
"XLM-USD", "LTC-USD", "USDT-USD", "ADA-USD", "XMR-USD",
"TRX-USD"))
sView(`ADA-USD`)
p_load(stocks, quantmod, dplyr, rvest, Quandl)
library(pacman)
p_load(stocks, quantmod, dplyr, rvest, Quandl)
sView(`ADA-USD`)
cat("\014") # clear screen
rm(list=ls()) # clear global environment
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set wd to current file location
set.seed(1018)
cat("\014")
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
set.seed(1018)
install.packages("pacman")
library(pacman)
p_load(stocks, quantmod, dplyr, rvest, Quandl)
top_crypto_tickers <- getSymbols(c("BTC-USD","ETH-USD","XRP-USD","BCH-USD","EOS-USD",
"XLM-USD", "LTC-USD", "USDT-USD", "ADA-USD", "XMR-USD",
"TRX-USD"))
View(`ADA-USD`)
View(`ADA-USD`)
library(RMySQL)
con <- dbConnect(MySQL(),
user=uid,
password=rstudioapi::askForPassword("my-password"),
dbname=dbn,
host=svr,
Port = 1433)
svr = "127.0.0.1"
dbn = "stocks"
uid = "root"
con <- dbConnect(MySQL(),
user=uid,
password=rstudioapi::askForPassword("my-password"),
dbname=dbn,
host=svr,
Port = 1433)
con <- dbConnect(MySQL(),
user=uid,
password=rstudioapi::askForPassword("my-password"),
dbname=dbn,
host=svr)
sqlSave(con, ETH-USD, tablename = "ETH-USD")
library(sqldf)
library(RODBC)
install.packages(RODBC)
dbWriteTable(connection, value = ETH-USD, name = "ETH-USD", append = TRUE )
dbWriteTable(con, value = ETH-USD, name = "ETH-USD", append = TRUE )
dbWriteTable(connection, value = "ETH-USD", name = "ETH-USD", append = TRUE )
dbWriteTable(con, value = "ETH-USD", name = "ETH-USD", append = TRUE )
# Connect to FSB db server
con <- dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server = svr,
Database = dbn,
UID = uid,
PWD = rstudioapi::askForPassword("my-password"),
Port = 1433)
dbWriteTable(con, value = "ETH-USD", name = "ETH-USD", append = TRUE )
dbWriteTable(con, value = "ETH-USD", name = "ETHUSD", append = TRUE )
View(`ADA-USD`)
dbWriteTable(con, value = ETH-USD, name = "ETH-USD", append = TRUE )
dbWriteTable(con, value = `ETH-USD`, name = "ETH-USD", append = TRUE )
dbWriteTable(con, value = `ETH-USD`, name = `ETH-USD`, append = TRUE )
dbWriteTable(con, value = "ETH-USD", name = `ETH-USD`, append = TRUE )
View(`ADA-USD`)
View(`ADA-USD`)
dbWriteTable(con, value = "ETH-USD", name = `ETH-USD`, append = TRUE )
dbWriteTable(con, value = ETH-USD, name = `ETH-USD`, append = TRUE )
# Connect to FSB db server
con <- dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server = svr,
Database = dbn,
UID = uid,
PWD = rstudioapi::askForPassword("my-password"),
Port = 1433)
dbWriteTable(con, value = ETH-USD, name = `ETH-USD`, append = TRUE )
ETH <- ETH-USD
ETH <- `ETH-USD`
View(ETH)
View(`ADA-USD`)
dbWriteTable(con, value = ETH, name = `ETH-USD`, append = TRUE )
dbWriteTable(con, value = ETH, name = "ETH-USD", append = TRUE )
ETH <- as.data.frame(ETH)
View(ETH)
dbWriteTable(con, value = ETH, name = "ETH-USD", append = TRUE )
dbWriteTable(con, value = ETH, name = "ETH-USD", append = TRUE )
dbListTables(con)
View(`ADA-USD`)
dbListFields(con, tn)
# example write df as table to db
deleteMe <- data_frame(trial = 1:3, who = c("Mo", "Curly", "Larry"))
dbWriteTable(con, 'deleteMe', deleteMe)
ETH <- as.data.frame(`ETH-USD`)
dbWriteTable(con, value = ETH, name = "ETH-USD", append = TRUE )
View(`ETH-USD`)
ETH <- data_frame(trial = 1:2, who = c("ETH-USD.Open", "ETH-USD.high"))
View(ETH)
ETH <- as.data.frame(`ETH-USD`)
View(`ETH-USD`)
View(ETH)
dbListFields(con, 'ETH-USD')
dbListFields(con, "ETH-USD")
dbWriteTable(con, value = ETH, name = "ETH-USD", append = TRUE )
dbListTables(con)
dbListFields(con, "ETH-USD")
dbListTables(con)
dbListFields(con, "ETH_USD")
dbWriteTable(con, value = ETH, name = "ETH_USD", append = TRUE )
# Connect to FSB db server
con <- dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server = svr,
Database = dbn,
UID = uid,
PWD = rstudioapi::askForPassword("my-password"),
Port = 1433)
dbWriteTable(con, value = ETH, name = "ETH_USD", append = TRUE )
dbReadTable(con, "ETH_USD")
SHOW VARIABLES LIKE 'local_infile';
dbWriteTable(con, value = ETH, name = "ETH_USD", append = TRUE )
dbWriteTable(con, value = ETH, name = "ETH_USD", append = TRUE )
dbWriteTable(con, value = ETH, name = "ETH_USD", append = TRUE, row.names=F )
View(`ADA-USD`)
View(`ADA-USD`)
View(`ADA-USD`)
View(ETH)
View(ETH)
tidyquant::tq_get(c("ETH_USD","BTC_USD"))
tidyquant::tq_get(c("ETH-USD","BTC-USD"))
manar <- tidyquant::tq_get(c("AAPL","GE","F","MCD"))
ETH <- data.frame(`ETH-USD`)
View(ETH)
ETH <- data.frame(`ETH-USD`)
ETH$timestamp <- row.names(ETH)
colnames(ETH) <- c("open","high","low","close","volume", "adjusted","timestamp")
View(ETH)
dbWriteTable(con, value = ETH, name = "ETH_USD", append = TRUE, row.names=F )
dbWriteTable(con, value = ETH, name = "ETH_USD", append = TRUE)
, row.names=F
dbWriteTable(con, value = ETH, name = "ETH_USD", append = TRUE, row.names=F )
dbWriteTable(con, value = ETH, name = "ETH_USD", append = FALSE, row.names=F )
dbWriteTable(con, value = ETH, name = "ETH_USD", append = FALSE, overwrite = TRUE, row.names=F )
WriteTable(con, value = ETH, name = "ETH_USD", append = FALSE, overwrite = TRUE, row.names=F )
dbWriteTable(con, value = ETH, name = "ETH_USD", append = FALSE, overwrite = TRUE, row.names=F )
manar <- tidyquant::tq_get(c("AAPL","GE","F","MCD")) %>% select("adjusted")
View(manar)
manar <- tidyquant::tq_get(c("AAPL","GE","F","MCD"), get="adjusted")
manar <- tidyquant::tq_get(c("AAPL","GE","F","MCD"), get="stock.prices", select="adjusted")
View(manar)
manar <- tidyquant::tq_get(c("AAPL","GE","F","MCD"), get="stock.prices") %>% select(c("symbol,"adjusted))
manar <- tidyquant::tq_get(c("AAPL","GE","F","MCD"), get="stock.prices") %>% select(c("symbol","adjusted"))
manar
list = c[`BTC_USD`,`ETH_USD`,`XRP_USD`,`BCH_USD`,`EOS_USD`,`XLM_USD`, `LTC-USD`, `USDT_USD`, `ADA_USD`, `XMR_USD`, `TRX_USD`]
list = c(`BTC_USD`,`ETH_USD`,`XRP_USD`,`BCH_USD`,`EOS_USD`,`XLM_USD`, `LTC-USD`, `USDT_USD`, `ADA_USD`, `XMR_USD`, `TRX_USD`)
cryptoList = c(`BTC-USD`,`ETH-USD`,`XRP-USD`,`BCH-USD`,`EOS-USD`,`XLM-USD`, `LTC-USD`, `USDT-USD`, `ADA-USD`, `XMR-USD`, `TRX-USD`)
for (i in 1:length(cryptoList)) {
crypto <- data.frame(cryptoList[i])
crypto$timestamp <- row.names(crypto)
colnames(crypto) <- c("open","high","low","close","volume", "adjusted","timestamp")
dbWriteTable(con, value = crypto, name = cryptoDBTables[i], append = FALSE, overwrite = TRUE, row.names=F )
}
cryptoList = c(`BTC-USD`,`ETH-USD`,`XRP-USD`,`BCH-USD`,`EOS-USD`,`XLM-USD`, `LTC-USD`, `USDT-USD`, `ADA-USD`, `XMR-USD`, `TRX-USD`)
cryptoDBTables = c("BTC_USD","ETH-USD","XRP_USD","BCH_USD","EOS_USD","XLM_USD", "LTC_USD", "USDT_USD", "ADA_USD", "XMR_USD", "TRX_USD")
for (i in 1:length(cryptoList)) {
crypto <- data.frame(cryptoList[i])
crypto$timestamp <- row.names(crypto)
colnames(crypto) <- c("open","high","low","close","volume", "adjusted","timestamp")
dbWriteTable(con, value = crypto, name = cryptoDBTables[i], append = FALSE, overwrite = TRUE, row.names=F )
}
cryptoList = c(`BTC-USD`,`ETH-USD`,`XRP-USD`,`BCH-USD`,`EOS-USD`,`XLM-USD`, `LTC-USD`, `USDT-USD`, `ADA-USD`, `XMR-USD`, `TRX-USD`)
cryptoDBTables = c("BTC_USD","ETH_USD","XRP_USD","BCH_USD","EOS_USD","XLM_USD", "LTC_USD", "USDT_USD", "ADA_USD", "XMR_USD", "TRX_USD")
for (i in 1:length(cryptoList)) {
crypto <- data.frame(cryptoList[i])
crypto$timestamp <- row.names(crypto)
colnames(crypto) <- c("open","high","low","close","volume", "adjusted","timestamp")
dbWriteTable(con, value = crypto, name = cryptoDBTables[i], append = FALSE, overwrite = TRUE, row.names=F )
}
cryptoList = c(`BTC-USD`,`ETH-USD`,`XRP-USD`,`BCH-USD`,`EOS-USD`,`XLM-USD`, `LTC-USD`, `USDT-USD`, `ADA-USD`, `XMR-USD`, `TRX-USD`)
cryptoDBTables = c("BTC_USD","ETH_USD","XRP_USD","BCH_USD","EOS_USD","XLM_USD", "LTC_USD", "USDT_USD", "ADA_USD", "XMR_USD", "TRX_USD")
for (i in 1:length(cryptoList)) {
crypto <- data.frame(cryptoList[i])
crypto$timestamp <- row.names(crypto)
colnames(crypto) <- c("open","high","low","close","volume", "adjusted","timestamp")
dbWriteTable(con, value = crypto, name = cryptoDBTables[i], append = FALSE, overwrite = TRUE, row.names=F )
}
for (i in 1:1) {
crypto <- data.frame(cryptoList[i])
crypto$timestamp <- row.names(crypto)
colnames(crypto) <- c("open","high","low","close","volume", "adjusted","timestamp")
dbWriteTable(con, value = crypto, name = cryptoDBTables[i], append = FALSE, overwrite = TRUE, row.names=F )
}
for (i in 1:2) {
crypto <- data.frame(cryptoList[i])
crypto$timestamp <- row.names(crypto)
colnames(crypto) <- c("open","high","low","close","volume", "adjusted","timestamp")
dbWriteTable(con, value = crypto, name = cryptoDBTables[i], append = FALSE, overwrite = TRUE, row.names=F )
}
for (i in 1:3) {
crypto <- data.frame(cryptoList[i])
crypto$timestamp <- row.names(crypto)
colnames(crypto) <- c("open","high","low","close","volume", "adjusted","timestamp")
dbWriteTable(con, value = crypto, name = cryptoDBTables[i], append = FALSE, overwrite = TRUE, row.names=F )
}
for (i in 1:5) {
crypto <- data.frame(cryptoList[i])
crypto$timestamp <- row.names(crypto)
colnames(crypto) <- c("open","high","low","close","volume", "adjusted","timestamp")
dbWriteTable(con, value = crypto, name = cryptoDBTables[i], append = FALSE, overwrite = TRUE, row.names=F )
}
for (i in 1:10) {
crypto <- data.frame(cryptoList[i])
crypto$timestamp <- row.names(crypto)
colnames(crypto) <- c("open","high","low","close","volume", "adjusted","timestamp")
dbWriteTable(con, value = crypto, name = cryptoDBTables[i], append = FALSE, overwrite = TRUE, row.names=F )
}
for (i in 1:15) {
crypto <- data.frame(cryptoList[i])
crypto$timestamp <- row.names(crypto)
colnames(crypto) <- c("open","high","low","close","volume", "adjusted","timestamp")
dbWriteTable(con, value = crypto, name = cryptoDBTables[i], append = FALSE, overwrite = TRUE, row.names=F )
}
for (i in 1:13) {
crypto <- data.frame(cryptoList[i])
crypto$timestamp <- row.names(crypto)
colnames(crypto) <- c("open","high","low","close","volume", "adjusted","timestamp")
dbWriteTable(con, value = crypto, name = cryptoDBTables[i], append = FALSE, overwrite = TRUE, row.names=F )
}
for (i in 1:12) {
crypto <- data.frame(cryptoList[i])
crypto$timestamp <- row.names(crypto)
colnames(crypto) <- c("open","high","low","close","volume", "adjusted","timestamp")
dbWriteTable(con, value = crypto, name = cryptoDBTables[i], append = FALSE, overwrite = TRUE, row.names=F )
}
for (i in 1:11) {
crypto <- data.frame(cryptoList[i])
crypto$timestamp <- row.names(crypto)
colnames(crypto) <- c("open","high","low","close","volume", "adjusted","timestamp")
dbWriteTable(con, value = crypto, name = cryptoDBTables[i], append = FALSE, overwrite = TRUE, row.names=F )
}
cryptoDBTables[11]
toList = c(`BTC-USD`,`ETH-USD`,`XRP-USD`,`BCH-USD`,`EOS-USD`,`XLM-USD`, `LTC-USD`, `USDT-USD`, `ADA-USD`, `XMR-USD`, `TRX-USD`)
cryptoDBTables = c("BTC_USD","ETH_USD","XRP_USD","BCH_USD","EOS_USD","XLM_USD", "LTC_USD", "USDT_USD", "ADA_USD", "XMR_USD", "TRX_USD")
for (i in 1:11) {
crypto <- data.frame(cryptoList[i])
crypto$timestamp <- row.names(crypto)
colnames(crypto) <- c("open","high","low","close","volume", "adjusted","timestamp")
dbWriteTable(con, value = crypto, name = cryptoDBTables[i], append = FALSE, overwrite = TRUE, row.names=F )
}
toList = c(`BTC-USD`,`ETH-USD`,`XRP-USD`,`BCH-USD`,`EOS-USD`,`XLM-USD`, `LTC-USD`, `USDT-USD`, `ADA-USD`, `XMR-USD`, `TRX-USD`)
cryptoDBTables = c("BTC_USD","ETH_USD","XRP_USD","BCH_USD","EOS_USD","XLM_USD", "LTC_USD", "USDT_USD", "ADA_USD", "XMR_USD", "TRX_USD")
for (i in 1:length(cryptoList)) {
crypto <- data.frame(cryptoList[i])
crypto$timestamp <- row.names(crypto)
colnames(crypto) <- c("open","high","low","close","volume", "adjusted","timestamp")
dbWriteTable(con, value = crypto, name = cryptoDBTables[i], append = FALSE, overwrite = TRUE, row.names=F )
}
i
{
i
crypto <- data.frame(cryptoList[i])
crypto$timestamp <- row.names(crypto)
colnames(crypto) <- c("open","high","low","close","volume", "adjusted","timestamp")
dbWriteTable(con, value = crypto, name = cryptoDBTables[i], append = FALSE, overwrite = TRUE, row.names=F )
}
cryptoList = c(`BTC-USD`,`ETH-USD`,`XRP-USD`,`BCH-USD`,`EOS-USD`,`XLM-USD`, `LTC-USD`, `USDT-USD`, `ADA-USD`, `XMR-USD`, `TRX-USD`)
cryptoDBTables = c("BTC_USD","ETH_USD","XRP_USD","BCH_USD","EOS_USD","XLM_USD", "LTC_USD", "USDT_USD", "ADA_USD", "XMR_USD", "TRX_USD")
for (i in 1:length(cryptoList)) {
print(i)
crypto <- data.frame(cryptoList[i])
crypto$timestamp <- row.names(crypto)
colnames(crypto) <- c("open","high","low","close","volume", "adjusted","timestamp")
dbWriteTable(con, value = crypto, name = cryptoDBTables[i], append = FALSE, overwrite = TRUE, row.names=F )
}
print(length(cryptoList))
print(length(cryptoList[0]))
for (i in 1:length(cryptoList)) {
print(i)
crypto <- data.frame(cryptoList[i])
crypto$timestamp <- row.names(crypto)
colnames(crypto) <- c("open","high","low","close","volume", "adjusted","timestamp")
dbWriteTable(con, value = crypto, name = cryptoDBTables[i], append = FALSE, overwrite = TRUE, row.names=F )
}
print(length(cryptoList[0]))
print(length(cryptoList[0]))
print(length(cryptoList[:,0]))
print(length(cryptoList[:0]))
print(length(cryptoList[:10]))
print(length(cryptoList[:]))
print(length(cryptoList[1:]))
print(length(cryptoList[]))
print(length(cryptoList[0]))
print(length(cryptoList[1]))
print(length(cryptoList[2]))
print(length(cryptoList[:]))
print(length(names(cryptoList)))
for (i in 1:length(cryptoDBTables)) {
print(i)
crypto <- data.frame(cryptoList[i])
crypto$timestamp <- row.names(crypto)
colnames(crypto) <- c("open","high","low","close","volume", "adjusted","timestamp")
dbWriteTable(con, value = crypto, name = cryptoDBTables[i], append = FALSE, overwrite = TRUE, row.names=F )
}
clear
dataholder <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(3) > table") %>%
html_table() %>% subset(Last != "Last")
View(dataholder)
View(dataholder)
View(dataholder)
View(dataholder)
dataholder <- dataholder[,-7]
View(dataholder)
View(dataholder)
dataholder2 <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(1) > table") %>%
html_table()
View(dataholder2)
View(dataholder2)
dataholder2 <- dataholder2[-1,-7]
View(dataholder2)
View(dataholder2)
colnames(dataholder)[1] <- "Index"
colnames(dataholder2) <- colnames(dataholder)
names <- rbind(dataholder2, dat
macroeconomic_names <- rbind(dataholder2, dataholder)
macroeconomic_names <- rbind(dataholder2, dataholder)
macroeconomic_names
ryptoList = c(`BTC-USD`,`ETH-USD`,`XRP-USD`,`BCH-USD`,`EOS-USD`,`XLM-USD`, `LTC-USD`, `USDT-USD`, `ADA-USD`, `XMR-USD`, `TRX-USD`)
cryptoDBTables = c("BTC_USD","ETH_USD","XRP_USD","BCH_USD","EOS_USD","XLM_USD", "LTC_USD", "USDT_USD", "ADA_USD", "XMR_USD", "TRX_USD")
for (i in 1:length(cryptoDBTables)) {
crypto <- data.frame(cryptoList[i])
crypto$timestamp <- row.names(crypto)
colnames(crypto) <- c("open","high","low","close","volume", "adjusted","timestamp")
dbWriteTable(con, value = crypto, name = cryptoDBTables[i], append = FALSE, overwrite = TRUE, row.names=F )
rm(cryptoList[i])
}
rm(cryptoList)
#__________________________________________________________________________
# US Economic Indicators based on Trading Economics
# Running this code; we got 198 names of U.S. Economic Indicators
# We need to scrape their data
dataholder <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(3) > table") %>%
html_table() %>% subset(Last != "Last")
View(dataholder)
View(dataholder)
dataholder <- dataholder[,-7]
View(dataholder)
View(dataholder)
#__________________________________________________________________________
# US Economic Indicators based on Trading Economics
# Running this code; we got 198 names of U.S. Economic Indicators
# We need to scrape their data
dataholder <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(3) > table") %>%
html_table() %>% subset(Last != "Last")
dataholder1 <- dataholder[,-7]
View(dataholder)
View(dataholder1)
# We need to scrape their data
dataholder <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(3) > table") %>%
html_table() %>% subset(Last != "Last")
dataholder <- dataholder[,-7]
dataholder2 <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(1) > table") %>%
html_table()
View(dataholder2)
View(dataholder2)
View(dataholder)
View(dataholder2)
View(dataholder2)
dataholder3 <- dataholder2[-1,-7]
View(dataholder3)
View(dataholder2)
View(dataholder3)
dataholder <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(3) > table") %>%
html_table() %>% subset(Last != "Last")
dataholder <- dataholder[,-7]
dataholder2 <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(1) > table") %>%
html_table()
dataholder2 <- dataholder2[-1,-7]
colnames(dataholder)[1] <- "Index"
colnames(dataholder2) <- colnames(dataholder)
View(dataholder)
View(dataholder2)
macroeconomic_names <- rbind(dataholder2, dataholder)
View(macroeconomic_names)
names(macroeconomic_names)
View(macroeconomic_names)
dbWriteTable(con, value = macroeconomic_names, name = "macroeconomic_names", append = FALSE, overwrite = TRUE, row.names=F )
vr = "127.0.0.1"
dbn = "stocks"
uid = "root"
con <- dbConnect(MySQL(),
user=uid,
password=rstudioapi::askForPassword("my-password"),
dbname=dbn,
host=svr)
svr = "127.0.0.1"
dbn = "stocks"
uid = "root"
con <- dbConnect(MySQL(),
user=uid,
password=rstudioapi::askForPassword("my-password"),
dbname=dbn,
host=svr)
dbWriteTable(con, value = macroeconomic_names, name = "macroeconomic_names", append = FALSE, overwrite = TRUE, row.names=F )
#__________________________________________________________________________
# U.S. Stocks (Sampled from AMEX, NYSE, NASDAQ)
# CSVs obtained from: https://www.nasdaq.com/screening/company-list.aspx
amex_sample <- read.csv("Data/amex-companylist.csv") %>% sample_frac(0.1)
amex_sample <- read.csv("Data/amex-companylist.csv") %>% sample_frac(0.1)
setwd(dirname("/Volumes/GoogleDrive/My Drive/cryptopredictions/Code")) # set wd to current file location
amex_sample <- read.csv("Data/amex-companylist.csv") %>% sample_frac(0.1)
pwd
setwd(dirname("/Volumes/GoogleDrive/My Drive/cryptopredictions/Code/DataCollection")) # set wd to current file location
#__________________________________________________________________________
# U.S. Stocks (Sampled from AMEX, NYSE, NASDAQ)
# CSVs obtained from: https://www.nasdaq.com/screening/company-list.aspx
amex_sample <- read.csv("Data/amex-companylist.csv") %>% sample_frac(0.1)
nyse_sample <- read.csv("Data/nyse-companylist.csv") %>% sample_frac(0.1)
#__________________________________________________________________________
# U.S. Stocks (Sampled from AMEX, NYSE, NASDAQ)
# CSVs obtained from: https://www.nasdaq.com/screening/company-list.aspx
amex_sample <- read.csv("DataCollection/Data/amex-companylist.csv") %>% sample_frac(0.1)
setwd(dirname("/Volumes/GoogleDrive/My Drive/cryptopredictions/Code/DataCollection/")) # set wd to current file location
nyse_sample <- read.csv("Data/nyse-companylist.csv") %>% sample_frac(0.1)
setwd(dirname("/Volumes/GoogleDrive/My Drive/cryptopredictions/Code/DataCollection/")) # set wd to current file location
nyse_sample <- read.csv("Data/nyse-companylist.csv") %>% sample_frac(0.1)
nyse_sample <- read.csv("DataCollection/Data/nyse-companylist.csv") %>% sample_frac(0.1)
nasdaq_sample <- read.csv("DataCollection/Data/nasdaq-companylist.csv") %>% sample_frac(0.1)
#__________________________________________________________________________
# U.S. Stocks (Sampled from AMEX, NYSE, NASDAQ)
# CSVs obtained from: https://www.nasdaq.com/screening/company-list.aspx
amex_sample <- read.csv("DataCollection/Data/amex-companylist.csv") %>% sample_frac(0.1)
View(amex_sample)
stocks_to_be_tracked <- rbind(amex_sample, nasdaq_sample, nyse_sample)
View(stocks_to_be_tracked)
View(stocks_to_be_tracked)
View(stocks_to_be_tracked)
View(stocks_to_be_tracked)
View(stocks_to_be_tracked)
install.packages('rvest')
View(amex_sample)
View(amex_sample)
View(stocks_to_be_tracked)
View(stocks_to_be_tracked)
url <- 'https://www.nasdaq.com/symbol/silv'
webpage <- read_html(url)
library(rvest)
library(rvest)
webpage <- read_html(url)
xpath_close_price = '//b[contains(text(),"Close Price:")]/following-sibling::span/text()'
raw_open_date = parser.xpath(xpath_open_date)
raw_open_date = webpage.xpath(xpath_open_date)
url <- 'https://www.nasdaq.com/symbol/silv'
population <- url %>%
html() %>%
html_nodes(xpath='//*[@id="left-column-div"]/div[1]/div[1]/div/div[3]/div[2]') %>%
html_table()
population <- url %>%
html() %>%
html_nodes(xpath='//*[@id="left-column-div"]/div[1]/div[1]/div/div[3]/div[2]')
html <- read_html(URL)
html <- read_html(url)
library(lubridate)
max <- raw %>%
html_nodes(xpath='//*[@id="left-column-div"]/div[1]/div[1]/div/div[3]/div[2]')  %>%
html_text()
max <- html_nodes(xpath='//*[@id="left-column-div"]/div[1]/div[1]/div/div[3]/div[2]')  %>%
html_text()
url %>%
read_html() %>%
html_nodes(xpath='//*[@class="table-cell"]')
View(stocks_to_be_tracked)
View(stocks_to_be_tracked)
quantmod::getSymbols(stocks_to_be_tracked[,1])
quantmod::getSymbols("NML")
View(NML)
View(NML)
quantmod::getSymbols(paste0("\"", stocks_to_be_tracked[,1], "\""))
quantmod::getSymbols("SILV")
View(SILV)
View(SILV)
for (i in 1:length(stocks_to_be_tracked)) {
quantmod::getSymbols(paste0("\"", stocks_to_be_tracked[i,1], "\""))
}
majors <- read_html("http://www.sharptrader.com/new-to-trading/forex/majors-minors-exotic-currency-pairs/") %>%
html_node("#content > div:nth-child(4) > div > div > div.wpb_text_column.wpb_content_element > div > div > table") %>%
html_table()
colnames(majors) <- majors[1,]
majors <- majors[-1,]
