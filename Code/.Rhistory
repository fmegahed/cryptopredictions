query = paste(query, "`( `timestamp` TEXT NOT NULL , `open` DOUBLE NOT NULL , `high` DOUBLE NOT NULL , `low` DOUBLE NOT NULL , `close` DOUBLE NOT NULL , `volume` DOUBLE NOT NULL , `adjusted` DOUBLE NOT NULL );", sep="")
dbSendQuery(con, query)
}
#insert the dataframe into the database
dbWriteTable(con, value = curCryptoTicker, name = cryptoList[i], append = TRUE, overwrite = FALSE, row.names=F )
rm(curCrypto)
}
#_______________________________Clear Screen and Environment
cat("\014") # clear screen
rm(list=ls()) # clear global environment
setwd(dirname("/Volumes/GoogleDrive/My Drive/cryptopredictions/Code/DataCollection/")) # set wd to current file location
set.seed(1018) # pick an arbitrary seed number; this number corresponded to date of analysis
# Seed number to be fixed to allow for replicating our analysis
#________________________________ Load Packages________________________
library(pacman)
library(DBI)
library(odbc)
library(RMySQL)
p_load(stocks, quantmod, dplyr, rvest, Quandl)
#_______________________________  Defining Credintial for DB connection________________________
## SET GLOBAL local_infile = 1; -> needed to be able to write into the database
## Miami Srver
svr = "10.36.0.112"
dbn = "stocks"
uid = "stocks"
pwd = "Fsb1=stocks"
con <- dbConnect(MySQL(),
user=uid,
password="Fsb1=stocks", #rstudioapi::askForPassword("my-password"),
dbname=dbn,
host=svr)
## Local host
# con <- dbConnect(MySQL(),
#                 user='root',
#                 password='password',
#                 dbname='stocks',
#                 host='localhost')
#__________________________________________________________________________
# Top 10 cryptos by volume as of 3:48 pm Eastern Time on 10/18/2018
# From https://coinmarketcap.com/
# Not all of these can be traded with a dollar. If there is not direct purchase
# with USD; the price of BTC is used for conversion
#top_crypto_tickers <- eval(parse(text = "x"))(c("BTC-USD","ETH-USD","XRP-USD","BCH-USD","EOS-USD",
#                                   "XLM-USD", "LTC-USD", "USDT-USD", "ADA-USD", "XMR-USD",
#                                   "TRX-USD")) # included 11 since USDT-USD is not volatile at all
#Note:
# We also got the data for their tickers based on the previous line of code
# and they are stored with the names of the ticker pairs
# Store the tickers into the database
#cryptoList = c(`BTC-USD`,`ETH-USD`,`XRP-USD`,`BCH-USD`,`EOS-USD`,`XLM-USD`, `LTC-USD`, `USDT-USD`, `ADA-USD`, `XMR-USD`, `TRX-USD`)
cryptoList = c("BTC_USD","ETH_USD","XRP_USD","BCH_USD","EOS_USD","XLM_USD", "LTC_USD", "USDT_USD", "ADA_USD", "XMR_USD", "TRX_USD")
for (i in 1:length(cryptoList)) {
# The name of the database tables has _ while the variables has -
curCryptoName = gsub("_", "-", cryptoList[i]);
getSymbols(curCryptoName)
#getSymbols create a variable that need to be accessed using `varname`
curCryptoVar = paste("`", curCryptoName, sep = "")
curCryptoVar = paste(curCryptoVar, "`", sep = "")
curCrypto = eval(parse(text = curCryptoVar))
#convert the xts data to dataframe
indexTZ(curCrypto) <- "UTC"
curCryptoTicker <- fortify.zoo(as.xts(curCrypto, dateFormat = "Date"))
colnames(curCryptoTicker) <- c("timestamp","open","high","low","close","volume", "adjusted")
rs <- dbSendQuery(con, "show tables")
table.frame <- fetch(rs, n = -1)
if (!cryptoList[i] %in% table.frame[, 1]) {
#If the table doesnt exist, create the database table
query = paste("CREATE TABLE `stocks`.`", cryptoList[i],  sep="")
query = paste(query, "`( `timestamp` TEXT NOT NULL , `open` DOUBLE NOT NULL , `high` DOUBLE NOT NULL , `low` DOUBLE NOT NULL , `close` DOUBLE NOT NULL , `volume` DOUBLE NOT NULL , `adjusted` DOUBLE NOT NULL );", sep="")
dbSendQuery(con, query)
}
#insert the dataframe into the database
dbWriteTable(con, value = curCryptoTicker, name = cryptoList[i], append = TRUE, overwrite = FALSE, row.names=F )
}
rm(curCrypto, rs, table.frame, `BTC-USD`,`ETH-USD`,`XRP-USD`,`BCH-USD`,`EOS-USD`,`XLM-USD`, `LTC-USD`, `USDT-USD`, `ADA-USD`, `XMR-USD`, `TRX-USD`)
#_______________________________Clear Screen and Environment
cat("\014") # clear screen
rm(list=ls()) # clear global environment
setwd(dirname("/Volumes/GoogleDrive/My Drive/cryptopredictions/Code/DataCollection/")) # set wd to current file location
set.seed(1018) # pick an arbitrary seed number; this number corresponded to date of analysis
# Seed number to be fixed to allow for replicating our analysis
#________________________________ Load Packages________________________
library(pacman)
library(DBI)
library(odbc)
library(RMySQL)
p_load(stocks, quantmod, dplyr, rvest, Quandl)
#_______________________________  Defining Credintial for DB connection________________________
## SET GLOBAL local_infile = 1; -> needed to be able to write into the database
## Miami Srver
svr = "10.36.0.112"
dbn = "stocks"
uid = "stocks"
pwd = "Fsb1=stocks"
con <- dbConnect(MySQL(),
user=uid,
password="Fsb1=stocks", #rstudioapi::askForPassword("my-password"),
dbname=dbn,
host=svr)
## Local host
# con <- dbConnect(MySQL(),
#                 user='root',
#                 password='password',
#                 dbname='stocks',
#                 host='localhost')
#__________________________________________________________________________
# Top 10 cryptos by volume as of 3:48 pm Eastern Time on 10/18/2018
# From https://coinmarketcap.com/
# Not all of these can be traded with a dollar. If there is not direct purchase
# with USD; the price of BTC is used for conversion
#top_crypto_tickers <- eval(parse(text = "x"))(c("BTC-USD","ETH-USD","XRP-USD","BCH-USD","EOS-USD",
#                                   "XLM-USD", "LTC-USD", "USDT-USD", "ADA-USD", "XMR-USD",
#                                   "TRX-USD")) # included 11 since USDT-USD is not volatile at all
#Note:
# We also got the data for their tickers based on the previous line of code
# and they are stored with the names of the ticker pairs
# Store the tickers into the database
#cryptoList = c(`BTC-USD`,`ETH-USD`,`XRP-USD`,`BCH-USD`,`EOS-USD`,`XLM-USD`, `LTC-USD`, `USDT-USD`, `ADA-USD`, `XMR-USD`, `TRX-USD`)
cryptoList = c("BTC_USD","ETH_USD","XRP_USD","BCH_USD","EOS_USD","XLM_USD", "LTC_USD", "USDT_USD", "ADA_USD", "XMR_USD", "TRX_USD")
for (i in 1:length(cryptoList)) {
# The name of the database tables has _ while the variables has -
curCryptoName = gsub("_", "-", cryptoList[i]);
getSymbols(curCryptoName)
#getSymbols create a variable that need to be accessed using `varname`
curCryptoVar = paste("`", curCryptoName, sep = "")
curCryptoVar = paste(curCryptoVar, "`", sep = "")
curCrypto = eval(parse(text = curCryptoVar))
#convert the xts data to dataframe
indexTZ(curCrypto) <- "UTC"
curCryptoTicker <- fortify.zoo(as.xts(curCrypto, dateFormat = "Date"))
colnames(curCryptoTicker) <- c("timestamp","open","high","low","close","volume", "adjusted")
rs <- dbSendQuery(con, "show tables")
table.frame <- fetch(rs, n = -1)
if (!cryptoList[i] %in% table.frame[, 1]) {
#If the table doesnt exist, create the database table
query = paste("CREATE TABLE `stocks`.`", cryptoList[i],  sep="")
query = paste(query, "`( `timestamp` TEXT NOT NULL , `open` DOUBLE NOT NULL , `high` DOUBLE NOT NULL , `low` DOUBLE NOT NULL , `close` DOUBLE NOT NULL , `volume` DOUBLE NOT NULL , `adjusted` DOUBLE NOT NULL );", sep="")
dbSendQuery(con, query)
}
#insert the dataframe into the database
dbWriteTable(con, value = curCryptoTicker, name = cryptoList[i], append = TRUE, overwrite = FALSE, row.names=F )
}
rm(list=setdiff(ls(), "con"))
dataholder <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(3) > table") %>%
html_table() %>% subset(Last != "Last")
dataholder <- dataholder[,-7]
dataholder2 <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(1) > table") %>%
html_table()
dataholder2 <- dataholder2[-1,-7]
colnames(dataholder)[1] <- "Index"
colnames(dataholder2) <- colnames(dataholder)
macroeconomic_names <- rbind(dataholder2, dataholder)
dbWriteTable(con, value = macroeconomic_names, name = "macroeconomic_names", append = TRUE, overwrite = FALSE, row.names=F )
rm(dataholder, dataholder2, macroeconomic_names) # Data Cleaning; we do not need to store them
dataholder <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(3) > table") %>%
html_table() %>% subset(Last != "Last")
dataholder <- dataholder[,-7]
dataholder2 <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(1) > table") %>%
html_table()
dataholder <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(3) > table") %>%
html_table() %>% subset(Last != "Last")
dataholder <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(3) > table") %>%
html_table() %>% subset(Last != "Last")
dataholder2 <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(1) > table") %>%
html_table()
amex_sample <- read.csv("DataCollection/Data/amex-companylist.csv") %>% sample_frac(0.1)
nyse_sample <- read.csv("DataCollection/Data/nyse-companylist.csv") %>% sample_frac(0.1)
nasdaq_sample <- read.csv("DataCollection/Data/nasdaq-companylist.csv") %>% sample_frac(0.1)
stocks_to_be_tracked <- rbind(amex_sample, nasdaq_sample, nyse_sample)
stocks_to_be_tracked
for (i in 1:length(stocks_to_be_tracked)) {
quantmod::getSymbols(paste0("\"", stocks_to_be_tracked[i,1], "\""))
}
i = 1
quantmod::getSymbols(paste0("\"", stocks_to_be_tracked[i,1], "\""))
getSymbols("RNN")
RNN
t = getSymbols("RNN")
t
getSymbols(paste0("\"", stocks_to_be_tracked[i,1], "\""))
paste0("\"", stocks_to_be_tracked[i,1], "\"")
paste0("\"", stocks_to_be_tracked[i,1], "\"")
paste0(", stocks_to_be_tracked[i,1], "\"")
paste0("\"", stocks_to_be_tracked[i,1], "\"")
paste0(""", stocks_to_be_tracked[i,1], "\"")
paste0("\"", stocks_to_be_tracked[i,1], "\"")
stocks_to_be_tracked[i,1]
stocks_to_be_tracked[i,1]
stocks_to_be_tracked[i,1]
stocks_to_be_tracked[0,1]
i = 1
stocks_to_be_tracked[1,1]
i = 1
quantmod::getSymbols(paste0("\"", stocks_to_be_tracked[i,1], "\""))
paste0("\"", stocks_to_be_tracked[i,1], "\"")
paste0("\"", stocks_to_be_tracked[i,1], "\"")
paste("\"", stocks_to_be_tracked[i,1])
paste(", stocks_to_be_tracked[i,1])
paste("", stocks_to_be_tracked[i,1])
""
paste("", stocks_to_be_tracked[i,1])
paste("", stocks_to_be_tracked[i,1], sep="")
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
t::getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
quantmod::getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
quantmod
quantmod
rm(list=setdiff(ls(), "con"))
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
amex_sample <- read.csv("DataCollection/Data/amex-companylist.csv") %>% sample_frac(0.1)
nyse_sample <- read.csv("DataCollection/Data/nyse-companylist.csv") %>% sample_frac(0.1)
nasdaq_sample <- read.csv("DataCollection/Data/nasdaq-companylist.csv") %>% sample_frac(0.1)
stocks_to_be_tracked <- rbind(amex_sample, nasdaq_sample, nyse_sample)
rm(amex_sample, nyse_sample, nasdaq_sample)
i = 1
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
stocks_to_be_tracked[i,1]
View(CPHI)
View(CPHI)
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
cur = eval(parse(text = stocks_to_be_tracked[i,1]))
eval(parse(text = curCryptoVar))
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
cur = eval(parse(text = stocks_to_be_tracked[i,1]))
cur = eval(parse(text =paste0("\"", stocks_to_be_tracked[i,1], "\"")))
cur = eval(parse(text =paste0("\"", stocks_to_be_tracked[i,1], "\"")))
cur
paste("", stocks_to_be_tracked[i,1], sep="")
cur = eval(parse(text =paste("", stocks_to_be_tracked[i,1], sep="")))
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
cur = eval(parse(text =paste("", stocks_to_be_tracked[i,1], sep="")))
#convert the xts data to dataframe
indexTZ(cur) <- "UTC"
curCryptoTicker <- fortify.zoo(as.xts(cur, dateFormat = "Date"))
rm(list=setdiff(ls(), "con"))
amex_sample <- read.csv("DataCollection/Data/amex-companylist.csv") %>% sample_frac(0.1)
nyse_sample <- read.csv("DataCollection/Data/nyse-companylist.csv") %>% sample_frac(0.1)
nasdaq_sample <- read.csv("DataCollection/Data/nasdaq-companylist.csv") %>% sample_frac(0.1)
stocks_to_be_tracked <- rbind(amex_sample, nasdaq_sample, nyse_sample)
rm(amex_sample, nyse_sample, nasdaq_sample)
i = 1
# quantmod::getSymbols(paste0("\"", stocks_to_be_tracked[i,1], "\""))
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
cur = eval(parse(text =paste("", stocks_to_be_tracked[i,1], sep="")))
indexTZ(cur) <- "UTC"
curTicker <- fortify.zoo(as.xts(cur, dateFormat = "Date"))
colnames(curTicker)
colnames(curTicker[1,])
colnames(curTicker)[1]
colnames(curTicker)[2]
colNames = colnames(curTicker)
colNames[2,]
colNames[2:]
colnames(curTicker)
colnames(curTicker)[colnames(curTicker)=="Index"] <- "timestamp"
colnames(curTicker)
paste(stocks_to_be_tracked[i,1], ".timestamp", sep="")
i = 1
# quantmod::getSymbols(paste0("\"", stocks_to_be_tracked[i,1], "\""))
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
cur = eval(parse(text =paste("", stocks_to_be_tracked[i,1], sep="")))
#convert the xts data to dataframe
indexTZ(cur) <- "UTC"
curTicker <- fortify.zoo(as.xts(cur, dateFormat = "Date"))
colnames(curTicker)[colnames(curTicker)=="Index"] <- paste(stocks_to_be_tracked[i,1], ".timestamp", sep="")
colnames(curTicker)
paste("", stocks_to_be_tracked[i,1], sep="")
i = 1
# quantmod::getSymbols(paste0("\"", stocks_to_be_tracked[i,1], "\""))
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
cur = eval(parse(text =paste("", stocks_to_be_tracked[i,1], sep="")))
#convert the xts data to dataframe
indexTZ(cur) <- "UTC"
curTicker <- fortify.zoo(as.xts(cur, dateFormat = "Date"))
colnames(curTicker)[colnames(curTicker)=="Index"] <- paste(stocks_to_be_tracked[i,1], ".timestamp", sep="")
colnames(curTicker) <- c("timestamp","open","high","low","close","volume", "adjusted")
#insert the dataframe into the database
dbWriteTable(con, value = curTicker, name = paste("", stocks_to_be_tracked[i,1], sep=""), append = TRUE, overwrite = FALSE, row.names=F )
paste("", stocks_to_be_tracked[i,1], sep="")
for (i in 1:length(stocks_to_be_tracked)) {
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
cur = eval(parse(text =paste("", stocks_to_be_tracked[i,1], sep="")))
#convert the xts data to dataframe
indexTZ(cur) <- "UTC"
curTicker <- fortify.zoo(as.xts(cur, dateFormat = "Date"))
colnames(curTicker)[colnames(curTicker)=="Index"] <- paste(stocks_to_be_tracked[i,1], ".timestamp", sep="")
#insert the dataframe into the database
dbWriteTable(con, value = curTicker, name = paste("", stocks_to_be_tracked[i,1], sep=""), append = TRUE, overwrite = FALSE, row.names=F )
}
rm(list=setdiff(ls(), "con"))
for (i in 1:length(stocks_to_be_tracked)) {
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
cur = eval(parse(text =paste("", stocks_to_be_tracked[i,1], sep="")))
#convert the xts data to dataframe
indexTZ(cur) <- "UTC"
curTicker <- fortify.zoo(as.xts(cur, dateFormat = "Date"))
colnames(curTicker)[colnames(curTicker)=="Index"] <- paste(stocks_to_be_tracked[i,1], ".timestamp", sep="")
#insert the dataframe into the database
dbWriteTable(con, value = curTicker, name = paste("", stocks_to_be_tracked[i,1], sep=""), append = TRUE, overwrite = FALSE, row.names=F )
}
amex_sample <- read.csv("DataCollection/Data/amex-companylist.csv") %>% sample_frac(0.1)
nyse_sample <- read.csv("DataCollection/Data/nyse-companylist.csv") %>% sample_frac(0.1)
nasdaq_sample <- read.csv("DataCollection/Data/nasdaq-companylist.csv") %>% sample_frac(0.1)
stocks_to_be_tracked <- rbind(amex_sample, nasdaq_sample, nyse_sample)
rm(amex_sample, nyse_sample, nasdaq_sample)
for (i in 1:length(stocks_to_be_tracked)) {
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
cur = eval(parse(text =paste("", stocks_to_be_tracked[i,1], sep="")))
#convert the xts data to dataframe
indexTZ(cur) <- "UTC"
curTicker <- fortify.zoo(as.xts(cur, dateFormat = "Date"))
colnames(curTicker)[colnames(curTicker)=="Index"] <- paste(stocks_to_be_tracked[i,1], ".timestamp", sep="")
#insert the dataframe into the database
dbWriteTable(con, value = curTicker, name = paste("", stocks_to_be_tracked[i,1], sep=""), append = TRUE, overwrite = FALSE, row.names=F )
}
for (i in 1:length(stocks_to_be_tracked)) {
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
cur = eval(parse(text =paste("", stocks_to_be_tracked[i,1], sep="")))
#convert the xts data to dataframe
indexTZ(cur) <- "UTC"
curTicker <- fortify.zoo(as.xts(cur, dateFormat = "Date"))
colnames(curTicker)[colnames(curTicker)=="Index"] <- paste(stocks_to_be_tracked[i,1], ".timestamp", sep="")
#insert the dataframe into the database
dbWriteTable(con, value = curTicker, name = paste("", stocks_to_be_tracked[i,1], sep=""), append = TRUE, overwrite = FALSE, row.names=F )
}
for (i in 1:length(stocks_to_be_tracked)) {
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
cur = eval(parse(text =paste("", stocks_to_be_tracked[i,1], sep="")))
#convert the xts data to dataframe
indexTZ(cur) <- "UTC"
curTicker <- fortify.zoo(as.xts(cur, dateFormat = "Date"))
colnames(curTicker)[colnames(curTicker)=="Index"] <- paste(stocks_to_be_tracked[i,1], ".timestamp", sep="")
#insert the dataframe into the database
dbWriteTable(con, value = curTicker, name = paste("", stocks_to_be_tracked[i,1], sep=""), append = TRUE, overwrite = FALSE, row.names=F )
}
getSymbols(LTSK)
getSymbols("LTSK")
for (i in 1:length(stocks_to_be_tracked)) {
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
cur = eval(parse(text =paste("", stocks_to_be_tracked[i,1], sep="")))
#convert the xts data to dataframe
indexTZ(cur) <- "UTC"
curTicker <- fortify.zoo(as.xts(cur, dateFormat = "Date"))
colnames(curTicker)[colnames(curTicker)=="Index"] <- paste(stocks_to_be_tracked[i,1], ".timestamp", sep="")
#insert the dataframe into the database
dbWriteTable(con, value = curTicker, name = paste("", stocks_to_be_tracked[i,1], sep=""), append = TRUE, overwrite = FALSE, row.names=F )
}
for (i in 1:length(stocks_to_be_tracked)) {
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
cur = eval(parse(text =paste("", stocks_to_be_tracked[i,1], sep="")))
#convert the xts data to dataframe
indexTZ(cur) <- "UTC"
curTicker <- fortify.zoo(as.xts(cur, dateFormat = "Date"))
colnames(curTicker)[colnames(curTicker)=="Index"] <- paste(stocks_to_be_tracked[i,1], ".timestamp", sep="")
#insert the dataframe into the database
dbWriteTable(con, value = curTicker, name = paste("", stocks_to_be_tracked[i,1], sep=""), append = TRUE, overwrite = FALSE, row.names=F )
}
stocks_to_be_tracked
i = 1
result = tryCatch({
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
cur = eval(parse(text =paste("", stocks_to_be_tracked[i,1], sep="")))
#convert the xts data to dataframe
indexTZ(cur) <- "UTC"
curTicker <- fortify.zoo(as.xts(cur, dateFormat = "Date"))
colnames(curTicker)[colnames(curTicker)=="Index"] <- paste(stocks_to_be_tracked[i,1], ".timestamp", sep="")
#insert the dataframe into the database
dbWriteTable(con, value = curTicker, name = paste("", stocks_to_be_tracked[i,1], sep=""), append = TRUE, overwrite = FALSE, row.names=F )
}, warning = function(w) {
print(paste("MY_WARNING:  ",w))
}, error = function(e) {
print(paste("Error:  ",e))
}, finally = {
})
i = 4
result = tryCatch({
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
cur = eval(parse(text =paste("", stocks_to_be_tracked[i,1], sep="")))
#convert the xts data to dataframe
indexTZ(cur) <- "UTC"
curTicker <- fortify.zoo(as.xts(cur, dateFormat = "Date"))
colnames(curTicker)[colnames(curTicker)=="Index"] <- paste(stocks_to_be_tracked[i,1], ".timestamp", sep="")
#insert the dataframe into the database
dbWriteTable(con, value = curTicker, name = paste("", stocks_to_be_tracked[i,1], sep=""), append = TRUE, overwrite = FALSE, row.names=F )
}, warning = function(w) {
print(paste("MY_WARNING:  ",w))
}, error = function(e) {
print(paste("Error:  ",e))
}, finally = {
})
for (i in 1:length(stocks_to_be_tracked)) {
result = tryCatch({
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
cur = eval(parse(text =paste("", stocks_to_be_tracked[i,1], sep="")))
#convert the xts data to dataframe
indexTZ(cur) <- "UTC"
curTicker <- fortify.zoo(as.xts(cur, dateFormat = "Date"))
colnames(curTicker)[colnames(curTicker)=="Index"] <- paste(stocks_to_be_tracked[i,1], ".timestamp", sep="")
#insert the dataframe into the database
dbWriteTable(con, value = curTicker, name = paste("", stocks_to_be_tracked[i,1], sep=""), append = TRUE, overwrite = FALSE, row.names=F )
}, warning = function(w) {
print(paste("MY_WARNING:  ",w))
}, error = function(e) {
print(paste("Error:  ",e))
}, finally = {
})
}
length(stocks_to_be_tracked)
stocks_to_be_tracked
dataholder <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(3) > table") %>%
html_table() %>% subset(Last != "Last")
cat("\014") # clear screen
rm(list=ls()) # clear global environment
setwd(dirname("/Volumes/GoogleDrive/My Drive/cryptopredictions/Code/DataCollection/")) # set wd to current file location
set.seed(1018) # pick an arbitrary seed number; this number corresponded to date of analysis
# Seed number to be fixed to allow for replicating our analysis
#________________________________ Load Packages________________________
library(pacman)
library(DBI)
library(odbc)
library(RMySQL)
p_load(stocks, quantmod, dplyr, rvest, Quandl)
dataholder <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("#ctl00_ContentPlaceHolder1_ctl00_Panel1 > div:nth-child(3) > table") %>%
html_table() %>% subset(Last != "Last")
dataholder <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("overview > div:nth-child(2) > table") %>%
html_table() %>% subset(Last != "Last")
dataholder <- read_html("https://tradingeconomics.com/united-states/indicators") %>%
html_node("overview > div:nth-child(2) > table") %>%
html_table()
dataholder <- read_html("http://tradingeconomics.com/united-states/indicators") %>%
html_node("overview > div:nth-child(2) > table") %>%
html_table()
amex_sample <- read.csv("DataCollection/Data/amex-companylist.csv") %>% sample_frac(0.1)
nyse_sample <- read.csv("DataCollection/Data/nyse-companylist.csv") %>% sample_frac(0.1)
nasdaq_sample <- read.csv("DataCollection/Data/nasdaq-companylist.csv") %>% sample_frac(0.1)
stocks_to_be_tracked <- rbind(amex_sample, nasdaq_sample, nyse_sample)
rm(amex_sample, nyse_sample, nasdaq_sample)
stocks_to_be_tracked
View(stocks_to_be_tracked)
View(stocks_to_be_tracked)
length(stocks_to_be_tracked)
for (i in 1:nrow(stocks_to_be_tracked)) {
result = tryCatch({
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
cur = eval(parse(text =paste("", stocks_to_be_tracked[i,1], sep="")))
#convert the xts data to dataframe
indexTZ(cur) <- "UTC"
curTicker <- fortify.zoo(as.xts(cur, dateFormat = "Date"))
colnames(curTicker)[colnames(curTicker)=="Index"] <- paste(stocks_to_be_tracked[i,1], ".timestamp", sep="")
#insert the dataframe into the database
dbWriteTable(con, value = curTicker, name = paste("", stocks_to_be_tracked[i,1], sep=""), append = TRUE, overwrite = FALSE, row.names=F )
}, warning = function(w) {
print(paste("MY_WARNING:  ",w))
}, error = function(e) {
print(paste("Error:  ",e))
}, finally = {
})
}
svr = "10.36.0.112"
dbn = "stocks"
uid = "stocks"
pwd = "Fsb1=stocks"
con <- dbConnect(MySQL(),
user=uid,
password="Fsb1=stocks", #rstudioapi::askForPassword("my-password"),
dbname=dbn,
host=svr)
amex_sample <- read.csv("DataCollection/Data/amex-companylist.csv") %>% sample_frac(0.1)
nyse_sample <- read.csv("DataCollection/Data/nyse-companylist.csv") %>% sample_frac(0.1)
nasdaq_sample <- read.csv("DataCollection/Data/nasdaq-companylist.csv") %>% sample_frac(0.1)
stocks_to_be_tracked <- rbind(amex_sample, nasdaq_sample, nyse_sample)
rm(amex_sample, nyse_sample, nasdaq_sample)
for (i in 1:nrow(stocks_to_be_tracked)) {
result = tryCatch({
getSymbols(paste("", stocks_to_be_tracked[i,1], sep=""))
cur = eval(parse(text =paste("", stocks_to_be_tracked[i,1], sep="")))
#convert the xts data to dataframe
indexTZ(cur) <- "UTC"
curTicker <- fortify.zoo(as.xts(cur, dateFormat = "Date"))
colnames(curTicker)[colnames(curTicker)=="Index"] <- paste(stocks_to_be_tracked[i,1], ".timestamp", sep="")
#insert the dataframe into the database
dbWriteTable(con, value = curTicker, name = paste("", stocks_to_be_tracked[i,1], sep=""), append = TRUE, overwrite = FALSE, row.names=F )
}, warning = function(w) {
print(paste("MY_WARNING:  ",w))
}, error = function(e) {
print(paste("Error:  ",e))
}, finally = {
})
}
rm(list=setdiff(ls(), "con"))
View(stocks_to_be_tracked)
View(stocks_to_be_tracked)
majors <- read_html("http://www.sharptrader.com/new-to-trading/forex/majors-minors-exotic-currency-pairs/") %>%
html_node("#content > div:nth-child(4) > div > div > div.wpb_text_column.wpb_content_element > div > div > table") %>%
html_table()
colnames(majors) <- majors[1,]
majors <- majors[-1,]
majors <- read_html("http://www.sharptrader.com/new-to-trading/forex/majors-minors-exotic-currency-pairs/") %>%
html_node("#content > div:nth-child(4) > div > div > div.wpb_text_column.wpb_content_element > div > div > table") %>%
html_table()
